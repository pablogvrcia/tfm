#!/usr/bin/env python3
"""
Create visualization figures for Master's Thesis

This script generates publication-quality figures showing:
1. SAM 2 mask generation results
2. CLIP similarity heatmaps
3. Top-K mask alignment results
4. Side-by-side comparisons

Optimized for GTX 1060 6GB (segmentation only, no Stable Diffusion)
"""

import numpy as np
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from matplotlib.gridspec import GridSpec
import cv2
from pathlib import Path
from typing import List, Tuple
import time

from models.sam2_segmentation import SAM2MaskGenerator, MaskCandidate
from models.clip_features import CLIPFeatureExtractor
from models.mask_alignment import MaskTextAligner, ScoredMask
from PIL import Image

# Configure matplotlib for thesis-quality figures
plt.rcParams['figure.dpi'] = 300
plt.rcParams['savefig.dpi'] = 300
plt.rcParams['font.family'] = 'serif'
plt.rcParams['font.size'] = 10
plt.rcParams['axes.labelsize'] = 11
plt.rcParams['axes.titlesize'] = 12
plt.rcParams['xtick.labelsize'] = 9
plt.rcParams['ytick.labelsize'] = 9


class ThesisVisualizer:
    """Creates publication-quality visualizations for thesis."""

    def __init__(self, output_dir: str = "thesis_figures"):
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(exist_ok=True)

        print("Loading models...")
        self.sam = SAM2MaskGenerator(model_type='sam2_hiera_base_plus', device='cuda')
        self.clip = CLIPFeatureExtractor(device='cuda')
        self.aligner = MaskTextAligner(self.clip)
        print("✓ Models loaded\n")

    def create_figure_1_sam2_masks(self, image_path: str, save_name: str = "fig1_sam2_masks"):
        """
        Figure 1: SAM 2 Automatic Mask Generation
        Shows the comprehensive mask proposals generated by SAM 2.
        """
        print("Creating Figure 1: SAM 2 Mask Generation...")

        # Load image
        image = np.array(Image.open(image_path).convert('RGB'))

        # Generate masks
        masks = self.sam.generate_masks(image)
        print(f"  Generated {len(masks)} masks")

        # Create visualization
        fig = plt.figure(figsize=(12, 4))
        gs = GridSpec(1, 3, figure=fig, wspace=0.3)

        # Original image
        ax1 = fig.add_subplot(gs[0])
        ax1.imshow(image)
        ax1.set_title('(a) Original Image', fontweight='bold')
        ax1.axis('off')

        # All masks (color-coded by size)
        ax2 = fig.add_subplot(gs[1])
        vis_all = self.sam.visualize_masks(image, masks[:50], alpha=0.5)
        ax2.imshow(vis_all)
        ax2.set_title(f'(b) SAM 2 Mask Proposals (top 50/{len(masks)})', fontweight='bold')
        ax2.axis('off')

        # Size distribution
        ax3 = fig.add_subplot(gs[2])
        areas = [m.area for m in masks]
        ax3.hist(areas, bins=50, color='steelblue', alpha=0.7, edgecolor='black')
        ax3.set_xlabel('Mask Area (pixels)')
        ax3.set_ylabel('Frequency')
        ax3.set_title('(c) Mask Area Distribution', fontweight='bold')
        ax3.grid(True, alpha=0.3)
        ax3.set_yscale('log')

        # Save
        save_path = self.output_dir / f"{save_name}.png"
        plt.savefig(save_path, bbox_inches='tight', dpi=300)
        plt.close()
        print(f"  ✓ Saved: {save_path}\n")

        return masks

    def create_figure_2_clip_similarity(
        self,
        image_path: str,
        text_prompt: str,
        save_name: str = "fig2_clip_similarity"
    ):
        """
        Figure 2: CLIP Dense Similarity Heatmap
        Shows pixel-wise similarity between image regions and text prompt.
        """
        print(f"Creating Figure 2: CLIP Similarity for '{text_prompt}'...")

        # Load image
        image = np.array(Image.open(image_path).convert('RGB'))

        # Extract features
        _, dense_features = self.clip.extract_image_features(image)
        text_embedding = self.clip.extract_text_features(text_prompt)

        # Compute similarity map
        similarity_map = self.clip.compute_similarity_map(
            dense_features,
            text_embedding,
            target_size=(image.shape[0], image.shape[1])
        )

        # Create visualization
        fig = plt.figure(figsize=(12, 4))
        gs = GridSpec(1, 3, figure=fig, wspace=0.3)

        # Original
        ax1 = fig.add_subplot(gs[0])
        ax1.imshow(image)
        ax1.set_title('(a) Original Image', fontweight='bold')
        ax1.axis('off')

        # Similarity heatmap
        ax2 = fig.add_subplot(gs[1])
        im = ax2.imshow(similarity_map, cmap='hot', vmin=-1, vmax=1)
        ax2.set_title(f'(b) CLIP Similarity: "{text_prompt}"', fontweight='bold')
        ax2.axis('off')
        plt.colorbar(im, ax=ax2, fraction=0.046, pad=0.04, label='Cosine Similarity')

        # Overlay
        ax3 = fig.add_subplot(gs[2])
        overlay = self.clip.visualize_similarity_map(image, similarity_map, alpha=0.6)
        ax3.imshow(overlay)
        ax3.set_title('(c) Similarity Overlay', fontweight='bold')
        ax3.axis('off')

        # Save
        save_path = self.output_dir / f"{save_name}.png"
        plt.savefig(save_path, bbox_inches='tight', dpi=300)
        plt.close()
        print(f"  ✓ Saved: {save_path}\n")

        return similarity_map

    def create_figure_3_mask_alignment(
        self,
        image_path: str,
        text_prompt: str,
        masks: List[MaskCandidate] = None,
        top_k: int = 5,
        save_name: str = "fig3_alignment"
    ):
        """
        Figure 3: Mask-Text Alignment Results
        Shows top-K masks aligned with text prompt.
        """
        print(f"Creating Figure 3: Top-{top_k} Alignment for '{text_prompt}'...")

        # Load image
        image = np.array(Image.open(image_path).convert('RGB'))

        # Generate masks if not provided
        if masks is None:
            masks = self.sam.generate_masks(image)
            masks = self.sam.filter_by_size(masks, min_area=1024)

        # Align with text
        scored_masks, vis_data = self.aligner.align_masks_with_text(
            masks,
            text_prompt,
            image,
            top_k=top_k,
            return_similarity_maps=True
        )

        if not scored_masks:
            print(f"  ⚠ No matches found for '{text_prompt}'")
            return None

        # Create figure
        n_results = min(top_k, len(scored_masks))
        fig = plt.figure(figsize=(14, 3 * ((n_results + 2) // 3)))
        gs = GridSpec((n_results + 2) // 3, 3, figure=fig, hspace=0.4, wspace=0.3)

        # Plot each top mask
        for idx, scored_mask in enumerate(scored_masks[:n_results]):
            row = idx // 3
            col = idx % 3
            ax = fig.add_subplot(gs[row, col])

            # Create mask overlay
            overlay = image.copy()
            mask = scored_mask.mask_candidate.mask

            # Highlight mask region
            colored_mask = np.zeros_like(image)
            colored_mask[mask > 0] = [255, 0, 0]  # Red
            overlay = cv2.addWeighted(overlay, 0.7, colored_mask, 0.3, 0)

            # Draw bounding box
            x, y, w, h = scored_mask.mask_candidate.bbox
            cv2.rectangle(overlay, (x, y), (x+w, y+h), (0, 255, 0), 2)

            ax.imshow(overlay)
            ax.set_title(
                f'Rank #{idx+1}: Score={scored_mask.final_score:.3f}\n'
                f'Area={scored_mask.mask_candidate.area:,} px, '
                f'IoU={scored_mask.mask_candidate.predicted_iou:.2f}',
                fontsize=9
            )
            ax.axis('off')

        # Overall title
        fig.suptitle(
            f'Top-{n_results} Masks for "{text_prompt}"',
            fontsize=14,
            fontweight='bold',
            y=0.98
        )

        # Save
        save_path = self.output_dir / f"{save_name}.png"
        plt.savefig(save_path, bbox_inches='tight', dpi=300)
        plt.close()
        print(f"  ✓ Saved: {save_path}")
        print(f"  Found {len(scored_masks)} matches\n")

        return scored_masks

    def create_figure_4_comparison(
        self,
        image_path: str,
        prompts: List[str],
        save_name: str = "fig4_comparison"
    ):
        """
        Figure 4: Multi-Prompt Comparison
        Shows how different prompts produce different segmentations.
        """
        print("Creating Figure 4: Multi-Prompt Comparison...")

        # Load image
        image = np.array(Image.open(image_path).convert('RGB'))

        # Generate masks once
        masks = self.sam.generate_masks(image)
        masks = self.sam.filter_by_size(masks, min_area=1024)

        # Create figure
        n_prompts = len(prompts)
        fig = plt.figure(figsize=(4 * (n_prompts + 1), 4))
        gs = GridSpec(1, n_prompts + 1, figure=fig, wspace=0.3)

        # Original image
        ax0 = fig.add_subplot(gs[0])
        ax0.imshow(image)
        ax0.set_title('Original Image', fontweight='bold')
        ax0.axis('off')

        # Process each prompt
        for idx, prompt in enumerate(prompts):
            print(f"  Processing: '{prompt}'...")

            scored_masks, _ = self.aligner.align_masks_with_text(
                masks,
                prompt,
                image,
                top_k=1,
                return_similarity_maps=False
            )

            ax = fig.add_subplot(gs[idx + 1])

            if scored_masks:
                # Show top match
                overlay = image.copy()
                mask = scored_masks[0].mask_candidate.mask
                colored_mask = np.zeros_like(image)
                colored_mask[mask > 0] = [255, 0, 0]
                overlay = cv2.addWeighted(overlay, 0.6, colored_mask, 0.4, 0)

                ax.imshow(overlay)
                ax.set_title(
                    f'"{prompt}"\nScore: {scored_masks[0].final_score:.3f}',
                    fontweight='bold'
                )
            else:
                ax.imshow(image)
                ax.set_title(f'"{prompt}"\nNo match', fontweight='bold', color='red')

            ax.axis('off')

        # Save
        save_path = self.output_dir / f"{save_name}.png"
        plt.savefig(save_path, bbox_inches='tight', dpi=300)
        plt.close()
        print(f"  ✓ Saved: {save_path}\n")

    def create_all_figures(self, image_path: str, main_prompt: str):
        """Generate all thesis figures for a single image."""
        print("="*70)
        print("Generating All Thesis Figures")
        print("="*70)
        print(f"Image: {image_path}")
        print(f"Main prompt: '{main_prompt}'")
        print("="*70)
        print()

        # Figure 1: SAM 2 masks
        masks = self.create_figure_1_sam2_masks(image_path)

        # Figure 2: CLIP similarity
        self.create_figure_2_clip_similarity(image_path, main_prompt)

        # Figure 3: Top-K alignment
        self.create_figure_3_mask_alignment(image_path, main_prompt, masks, top_k=6)

        # Figure 4: Multi-prompt comparison
        comparison_prompts = [
            main_prompt,
            "background",
            "object",
        ]
        self.create_figure_4_comparison(image_path, comparison_prompts)

        print("="*70)
        print(f"✓ All figures saved to: {self.output_dir}/")
        print("="*70)


def main():
    """Main function to generate thesis visualizations."""

    # Configuration
    IMAGE_PATH = "photo.jpg"
    MAIN_PROMPT = "person"  # Change this to match your image content

    # Create visualizer
    visualizer = ThesisVisualizer(output_dir="thesis_figures")

    # Generate all figures
    visualizer.create_all_figures(IMAGE_PATH, MAIN_PROMPT)

    print()
    print("Done! Your thesis figures are ready.")
    print()
    print("Generated files:")
    for fig in sorted(Path("thesis_figures").glob("*.png")):
        print(f"  - {fig}")
    print()
    print("These figures are publication-quality (300 DPI) and ready for your thesis!")


if __name__ == "__main__":
    main()
